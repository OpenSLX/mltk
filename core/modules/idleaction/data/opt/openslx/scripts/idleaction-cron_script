#!/bin/ash

. /opt/openslx/config || exit 1

CRONFILE="/etc/cron.d/idleaction-shutdown_schedule"

# If existent, no session is open. Will contain timestamp of last activity.
# If not existent, at least one user is logged in
IDLEHINT="/run/openslx/idlehint"
NOW=$(date +%s)

get_sessions() {
	local LEGEND State Class
	LEGEND=
	loginctl --help 2>&1 | grep -q -- '--no-legend' && LEGEND="--no-legend"
	for SESSION in $(loginctl $LEGEND | awk '{print $1}'); do
		unset Display Remote State
		eval $(loginctl -p State -p Class show-session "$SESSION")
		if [ "$State" = "active" -o "$State" = "online" ] && [ "$Class" = "user" ]; then
			echo "$SESSION"
		fi
	done
}

gen_runfile() {
	# Calc next reboot/shutdown/standby
	local i dateline ts
	dateline=
	for i in $SLX_REBOOT_SCHEDULE $SLX_SHUTDOWN_SCHEDULE; do
		ts=$(date -d "today $i" +%s)
		[ "$ts" -gt 0 ] || continue # NaN
		ts=$(( ts + 300 )) # Account for the 5 minute delay if someone is logged in
		if [ "$ts" -lt "$NOW" ]; then
			ts=$(date -d "tomorrow $i" +%s)
			ts=$(( ts + 300 )) # Account for the 5 minute delay if someone is logged in
		fi
		[ "$ts" -gt "$NOW" ] || continue
		if [ -z "$dateline" ] || [ "$ts" -lt "$dateline" ]; then
			dateline="$ts"
		fi
	done
	cat <<EDOC
[General]
lockDeadline=0
shutdownDeadline=$dateline
EDOC
}

#
# 1) Check for idle timeout
#
if [ -n "${SLX_LOGOUT_TIMEOUT}" ] && [ "${SLX_LOGOUT_TIMEOUT}" -gt 0 ]; then
	# Logout timeout is set, see which users we should kick
	IS_IDLE=yes
	# get all sessions
	SESSIONS=$(get_sessions)
	if [ -n "$SESSIONS" ]; then
		TMP="/run/openslx/idlecheck.tmp"
		# Iterate over sessions
		for ses in $SESSIONS; do
			# Get information
			loginctl show-session "$ses" > "$TMP"
			NAME=$(grep '^Name=' "$TMP" | cut -c 6-)
			[ -z "$NAME" ] && continue # No name - should not happen
			export DISPLAY=$(grep '^Display=' "$TMP" | cut -c 9-)
			# X11
			if [ -n "$DISPLAY" ]; then
				# Seems to be x11
				IDLE=
				LOCK=
				export XAUTHORITY=$(ps a | grep " $DISPLAY " | grep -o -- '-auth.*$' | grep -m1 -v grep | awk '{print $2}')
				[ -n "$XAUTHORITY" ] && [ -f "$XAUTHORITY" ] && LOCK=$(xprintlocktime)
				# Now that we have DISPLAY and XAUTHORITY set, xprintidle should work
				if [ -z "$LOCK" ]; then
					# Try user's xauth
					USERID=$(id -u "$NAME")
					[ -z "$USERID" ] && USERID="$NAME"
					USRHOME=$(/usr/bin/getent passwd "$USERID" | awk -F ':' '{print $6}')
					export XAUTHORITY="$USRHOME/.Xauthority"
				fi
				if [ -f "$XAUTHORITY" ]; then
					[ -z "$LOCK" ] && LOCK=$(xprintlocktime)
					IDLE=$(xprintidle)
					[ -n "$IDLE" ] && IDLE=$(( NOW - ( IDLE / 1000 ) ))
				fi
				# Now consider locking - if the screen is locked, we don't want to consider the current idle time, but
				# the idle time of when the screen was locked - look it up and if not found, write current value
				RUNFILE="/run/idleaction-$DISPLAY"
				[ -f "$RUNFILE" ] || gen_runfile > "$RUNFILE"
				if [ -z "$LOCK" ]; then
					# Not locked anymore, nuke old value
					sed -i '/^lockIdleTime=/d' "$RUNFILE"
				else
					# Screen is locked, ignore further idle time updates
					RET=$(awk -F= '{if ($1 == "lockIdleTime") { print $2; exit } }' "$RUNFILE")
					if [ -z "$RET" ]; then
						if [ -z "$IDLE" ]; then
							IDLE="$LOCK"
						fi
						echo "lockIdleTime=$IDLE" >> "$RUNFILE"
					else
						# Use previous value
						IDLE="$RET" # XXX
					fi
				fi
				if [ -z "$IDLE" ] && [ -n "$LOCK" ]; then
					IDLE="$LOCK"
				fi
				if [ -n "$IDLE" ] && [ "$IDLE" -gt 0 ]; then
					TIMEOUT=$(( IDLE + SLX_LOGOUT_TIMEOUT ))

					if [ "$TIMEOUT" -lt "$NOW" ]; then
						rm -f -- "$RUNFILE"
						date +%s > /run/openslx/session-killed
						loginctl terminate-session "$ses"
					else
						IS_IDLE=no
						sed -i "s/^lockDeadline=.*$/lockDeadline=$TIMEOUT/" "$RUNFILE"
					fi
				else
					# xprint* did not work?
					IS_IDLE=no
				fi
				RUNFILE=
				continue # Done with this session, skip normal tty/ssh checks
			fi
			# end X11
			# other sessions
			IDLE=$(grep '^IdleSinceHint=' "$TMP" | cut -c 15-)
			if [ "${#IDLE}" -lt 7 ]; then # wah wah waaaah
				IS_IDLE=no
				continue
			fi
			# divide by 1000000 by chopping of last 6 chars - number might be too large for $(( ))
			IDLE=$(echo "$IDLE" | cut -c "-$(( ${#IDLE} - 6 ))")
			[ "$IDLE" -gt "$NOW" ] && IDLE="$NOW"
			IDLE=$(( $NOW - $IDLE ))
			if [ "$IDLE" -lt "$SLX_LOGOUT_TIMEOUT" ]; then
				IS_IDLE=no
			else
				date +%s > /run/openslx/session-killed
				loginctl terminate-session "$ses"
			fi
			# end other sessions
		done
		rm -f -- "$TMP"
	fi
	if [ "$IS_IDLE" = "yes" ]; then
		[ ! -e "$IDLEHINT" ] && echo "$NOW" > "$IDLEHINT"
	else
		rm -f -- "$IDLEHINT"
	fi
else
	# No logout timeout is set, take shortcut for shutdown/suspend timeout (if set)
	if [ -n "$SLX_SHUTDOWN_TIMEOUT" ] || [ -n "$SLX_SYSTEM_STANDBY_TIMEOUT" ]; then
		SESSIONS=$(get_sessions)
		if [ -z "$SESSIONS" ]; then
			[ ! -e "$IDLEHINT" ] && echo "$NOW" > "$IDLEHINT"
		else
			rm -f -- "$IDLEHINT"
		fi
	fi
fi

#
# 2) Check for no-session shutdown/suspend timeout
#
if [ -e "$IDLEHINT" ]; then
	IDLE=$(cat "$IDLEHINT")
	[ "$IDLE" -gt "$NOW" ] && IDLE="$NOW"
	IDLE=$(( $NOW - $IDLE ))
	if [ -n "${SLX_SHUTDOWN_TIMEOUT}" ] && [ "${SLX_SHUTDOWN_TIMEOUT}" -gt 0 ] && [ "$IDLE" -gt "$SLX_SHUTDOWN_TIMEOUT" ]; then
		poweroff &
		exit 0
	elif [ -n "${SLX_SYSTEM_STANDBY_TIMEOUT}" ] && [ "${SLX_SYSTEM_STANDBY_TIMEOUT}" -gt 0 ] && [ "$IDLE" -gt "$SLX_SYSTEM_STANDBY_TIMEOUT" ]; then
		rm -f -- "$IDLEHINT"
		if ! systemctl suspend; then
			slxlog --sync "idleaction-no-suspend" "Client does not support standby/suspend, doing nothing"
		fi
		exit 0
	fi
fi

#
# 3) Check for hard scheduled shutdown/reboot
#
# A cron file is created dynamically here so there's everything
# in one module and you don't need to repack config.tgz

invalid_time ()
{
	slxlog "idleaction-schedule" "Invalid shutdown time: '$time'. Expected HH:MM format."
	return 0
}

write_crontab ()
{
	local ACTION time HOUR MINUTE
	[ $# -lt 1 ] && return
	ACTION=$1
	shift
	for time in $*; do
		HOUR=${time%%:*}
		MINUTE=${time##*:}
		[ -z "$HOUR" -o -z "$MINUTE" ] && invalid_time && continue
		[ "$HOUR" -lt 0 -o "$HOUR" -gt 23 ] && invalid_time && continue
		[ "$MINUTE" -lt 0 -o "$MINUTE" -gt 59 ] && invalid_time && continue
		echo "$MINUTE $HOUR	* * *	root	/opt/openslx/scripts/idleaction-scheduled_action $ACTION --time $time" >> "$CRONFILE"
	done
}

if [ -n "$SLX_SHUTDOWN_SCHEDULE" -o -n "$SLX_REBOOT_SCHEDULE" ] && [ ! -e "$CRONFILE" ]; then
	echo "# OpenSLX: Trigger poweroff/reboot at certain time of day" > "$CRONFILE"
	echo "SHELL=/bin/ash" >> "$CRONFILE"
	echo "PATH=/usr/sbin:/usr/bin:/sbin:/bin:/opt/openslx/sbin:/opt/openslx/bin" >> "$CRONFILE"
	echo "" >> "$CRONFILE"
	write_crontab "poweroff" "$SLX_SHUTDOWN_SCHEDULE"
	write_crontab "reboot" "$SLX_REBOOT_SCHEDULE"
	# Might want to re-set rtcwake timestamp periodically
	if [ -n "$SLX_WAKEUP_SCHEDULE" ]; then
		echo "0 *	* * *	root	/opt/openslx/scripts/systemd-idleaction_init" >> "$CRONFILE"
	fi
	touch "/etc/cron.d" # Aufs bug where it won't update dir mtime when creating the file within
fi

